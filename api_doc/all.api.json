{
  "swagger":             "2.0",
  "info":                {
    "title":       "Digital CMR APIs",
    "description": "APIs for managing the digital CMR",
    "version":     "1.3.2"
  },
  "host":                "159.8.76.83:31001",
  "schemes":             [
    "http"
  ],
  "securityDefinitions": {
    "UserSecurity": {
      "type": "basic"
    }
  },
  "basePath":            "/api/v1",
  "produces":            [
    "application/json"
  ],
  "paths":               {
    "/login":                                           {
      "post": {
        "x-swagger-router-controller": "AuthController",
        "operationId":                 "login",
        "summary":                     "Login to the server",
        "description":                 "The user logs into the system and gets back user metadata an auth x-access-token\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "login-credentials",
            "in":          "body",
            "description": "Provide login credentials below:",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/LoginCredentials"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The user has successfully logged in\n",
            "schema":      {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportOrder/":                                 {
      "post": {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "createTransportOrder",
        "summary":                     "Create a new Transport Order",
        "description":                 "Creates a new transportOrder and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "transportOrder",
            "in":          "body",
            "description": "The transportOrder object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/TransportOrder"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Transport Order has been created and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/TransportOrder"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get":  {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "getAllTransportOrders",
        "summary":                     "Return the complete list of Transport Orders",
        "description":                 "Returns the complete list of Transport Orders which the current user has the right to read",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of Transport Orders is returned\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/TransportOrder"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportOrder/orderID/{orderID}":                {
      "get": {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "getTransportOrderByOrderID",
        "summary":                     "Return the Transport Order selected by ID",
        "description":                 "Returns the Transport Order that is selected by ID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "orderID",
            "type":        "string",
            "in":          "path",
            "description": "Unique orderID of the Transport Order",
            "required":    "true"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list contains the Transport Order. It is empty if a Transport Order with the provided orderID does not exist, or if the user does not have permission to read the Transport Order\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/TransportOrder"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportOrder/status/{orderStatus}":             {
      "get": {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "getAllTransportOrdersByStatus",
        "summary":                     "Return the Transport Order selected by status",
        "description":                 "Returns the Transport Order selected by status",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "status",
            "in":          "path",
            "type":        "string",
            "description": "Status of the Transport Order",
            "required":    "true"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list contains the Transport Order(s) by status. It is empty if a Transport Order with the provided status does not exist, or if the user does not have permission to read the Transport Order\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/TransportOrder"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportOrder/vin/{vin}":                        {
      "get": {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "getAllTransportOrdersByVin",
        "summary":                     "Return the Transport Order selected by VIN",
        "description":                 "Returns the Transport Order selected by VIN",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "vin",
            "in":          "path",
            "type":        "string",
            "description": "Provide the VIN that is used to make a selection of TransportOrders",
            "required":    "true"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list contains the Transport Order(s) by VIN. It is empty if a Transport Order with the provided VIN does not exist, or if the user does not have permission to read the Transport Order\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/TransportOrder"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportOrder/updatePickupWindow":               {
      "put": {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "updatePickupWindow",
        "summary":                     "Update the Pickup Window of an existing TransportOrder",
        "description":                 "Updates the Pickup Window of an existing transportOrder and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "TransportOrder",
            "in":          "body",
            "description": "Updates the TransportOrder object with the Pickup Window",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateWindow"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The TransportOrder has been updated and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateWindow"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportOrder/updateDeliveryWindow": {
      "put": {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "updateDeliveryWindow",
        "summary":                     "Update the Delivery Window of an existing TransportOrder",
        "description":                 "Updates the Delivery Window of an existing TransportOrder and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "ecmr",
            "in":          "body",
            "description": "Updates the TransportOrder object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateWindow"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The TransportOrder has been updated and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateWindow"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transportOrder/cancel":               {
      "put": {
        "x-swagger-router-controller": "TransportOrderController",
        "operationId":                 "cancelTransportOrder",
        "summary":                     "Update the status of an existing TransportOrder to cancelled",
        "description":                 "Updates the status of an existing TransportOrder to cancelled and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "ecmr",
            "in":          "body",
            "description": "Updates the TransportOrder object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/CancelTransportOrder"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The TransportOrder has been updated and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/CancelTransportOrder"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/":                               {
      "post": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "CreateECMRs",
        "summary":                     "Create new ECMR(s)",
        "description":                 "Creates new ECMR(s) and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "ecmr",
            "in":          "body",
            "description": "The ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/CreateECMRs"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been created and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/CreateECMRs"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get":  {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "getAllEcmrs",
        "summary":                     "Return the complete list of ECMRs",
        "description":                 "Returns the complete list of ECMRs, which the current user is allowed to read",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of ECMRs is returned\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/ECMR"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/status/LOADED":                  {
      "put": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "updateEcmrStatusToLoaded",
        "summary":                     "Update the status of an existing ECMR to LOADED",
        "description":                 "Updates the status of an existing ECMR to LOADED and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "object",
            "in":          "body",
            "description": "Updates the ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateStatus"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been updated and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateStatus"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/status/IN_TRANSIT":                          {
      "put": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "updateEcmrStatusToInTransit",
        "summary":                     "Update the status of an existing ECMR to IN_TRANSIT",
        "description":                 "Updates the status of an existing ECMR to IN_TRANSIT and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "object",
            "in":          "body",
            "description": "Updates the ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateStatus"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been updated and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateStatus"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/status/DELIVERED":                           {
      "put": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "updateEcmrStatusToDelivered",
        "summary":                     "Update the status of an existing ECMR to DELIVERED",
        "description":                 "Updates the status of an existing ECMR to DELIVERED and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "object",
            "in":          "body",
            "description": "Updates the ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateStatusWithTransportOrder"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been updated and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateStatusWithTransportOrder"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/status/CONFIRMED_DELIVERED":                 {
      "put": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "updateEcmrStatusToConfirmedDelivered",
        "summary":                     "Update the status of an existing ECMR to CONFIRMED_DELIVERED",
        "description":                 "Updates the status of an existing ECMR to CONFIRMED_DELIVERED and saves it to the blockchain, if the user has the proper permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "object",
            "in":          "body",
            "description": "Updates the ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateStatusWithTransportOrder"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been updated and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateStatusWithTransportOrder"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/ecmrID/{ecmrID}":                            {
      "get": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "getEcmrByEcmrID",
        "summary":                     "Return an ECMR selected by ID",
        "description":                 "Returns an ECMR selected by ID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "ecmrID",
            "type":        "string",
            "in":          "path",
            "description": "The unique ID of an ECMR",
            "required":    "true"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "It will return the ECMR object. It is empty if an ECMR with the provided ID does not exist, or if the user has no permission to read the ECMR\n",
            "schema":      {
              "type": "object",
              "$ref": "#/definitions/ECMR"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/status/{status}":                            {
      "get": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "getAllEcmrsByStatus",
        "summary":                     "Return the ECMR selected by status",
        "description":                 "Returns the ECMR selected by status",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "status",
            "in":          "path",
            "type":        "string",
            "description": "The status of the ECMR",
            "required":    "true"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list contains the ECMR(s) by status. It is empty if an ECMR with the provided status does not exist, or if the user has no permission to read the ECMR\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/ECMR"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/vehicle/vin/{vin}":                          {
      "get": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "getAllEcmrsFromVehicleByVin",
        "summary":                     "Return the ECMRs containing a vehicle with the provided vin",
        "description":                 "Returns the ECMRs containing a vehicle with the provided vin",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "vin",
            "in":          "path",
            "type":        "string",
            "description": "Unique vin of a vehicle",
            "required":    "true"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list contains the ECMRs containing a vehicle with the provided vin. It is empty if a vehicle with the provided vin does not exist, or if the user has no permission to read them\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/ECMR"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/vehicle/plateNumber/{plateNumber}":          {
      "get": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "getAllEcmrsFromVehicleByPlateNumber",
        "summary":                     "Return the ECMRs containing a vehicle with the provided plateNumber",
        "description":                 "Returns the ECMRs containing a vehicle with the provided plateNumber",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "plateNumber",
            "in":          "path",
            "type":        "string",
            "description": "Unique plateNumber of a vehicle",
            "required":    "true"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list contains the ECMRs containing a vehicle with the provided plateNumber. It is empty if a vehicle with the plateNumber does not exist or if the user has no permission to read them\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/ECMR"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/cancel/":                                    {
      "put": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "updateECMRtoCancelled",
        "summary":                     "Update an existing ECMR to cancelled",
        "description":                 "Updates an existing ECMR to cancelled and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "CancelECMR",
            "in":          "body",
            "description": "Updates the ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/CancelECMR"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been cancelled and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/CancelECMR"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/updateExpectedPickupWindow/":                {
      "put": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "updateExpectedPickupWindow",
        "summary":                     "Update an existing ECMR with the Expected Pickup Window",
        "description":                 "Updates an existing ECMR with the Expected Pickup Window and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "UpdatePickUpWindow",
            "in":          "body",
            "description": "Updates the ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateExpectedWindow"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been updated with the Expected Pickup Window and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateExpectedWindow"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ECMR/updateExpectedDeliveryWindow/":              {
      "put": {
        "x-swagger-router-controller": "ECMRController",
        "operationId":                 "updateExpectedDeliveryWindow",
        "summary":                     "Update an existing ECMR with the Expected Delivery Window",
        "description":                 "Updates an existing ECMR with the Expected Delivery Window and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "ecmr",
            "in":          "body",
            "description": "Updates the ECMR object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/UpdateExpectedWindow"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The ECMR has been updated with the Expected Delivery Window and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/UpdateExpectedWindow"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/legalowner/":                        {
      "post": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "createLegalOwner",
        "summary":                     "Create a new Legal Owner",
        "description":                 "Creates a new Legal Owner and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "legalOwnerOrg",
            "in":          "body",
            "description": "The Legal Owner Org object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/LegalOwnerOrg"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Legal Owner has been created and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/LegalOwnerOrg"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get":  {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getAllLegalOwnerOrgs",
        "summary":                     "Return the complete list of Legal Owners",
        "description":                 "Returns the complete list of Legal Owners, which the current user has the right to read",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Legal Owner has been found.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/LegalOwnerOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/legalowner/entityID/{entityID}":     {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getLegalOwnerOrgByEntityID",
        "summary":                     "Return the Legal Owner Organization selected by ID",
        "description":                 "Returns the Legal Owner Organization selected by ID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "entityID",
            "in":          "path",
            "description": "ID of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Legal Owner has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/LegalOwnerOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/legalowner/name/{name}":             {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getLegalOwnerOrgByName",
        "summary":                     "Return the Legal Owner Organization selected by name",
        "description":                 "Returns the Legal Owner Organization selected by name",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "name",
            "in":          "path",
            "description": "Name of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Legal Owner has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/LegalOwnerOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/compound/":                          {
      "post": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "createCompound",
        "summary":                     "Create a new Compound Organization",
        "description":                 "Creates a new Compound Organization and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "The authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "CompoundOrg",
            "in":          "body",
            "description": "The Compound organization object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/CompoundOrg"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Compound organization has been created and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/CompoundOrg"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get":  {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getAllCompoundOrgs",
        "summary":                     "Return the complete list of Compound Organizations",
        "description":                 "Returns the complete list of Legal Owners, which the current user has the right to read",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Compound organization has been found.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/CompoundOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/compound/entityID/{entityID}":       {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getCompoundOrgByEntityID",
        "summary":                     "Return the Compound Organization selected by ID",
        "description":                 "Returns the Compound Organization selected by ID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "entityID",
            "in":          "path",
            "description": "The ID of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Compound has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/CompoundOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/compound/name/{name}":               {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getCompoundOrgByName",
        "summary":                     "Return the Compound Organization selected by name",
        "description":                 "Returns the Compound Organization selected by name",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "name",
            "in":          "path",
            "description": "Name of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Compound has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/CompoundOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/carrier/":                           {
      "post": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "createCarrier",
        "summary":                     "Create a new Carrier Organization",
        "description":                 "Creates a new Carrier org and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "CarrierOrg",
            "in":          "body",
            "description": "The Carrier organization object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/CarrierOrg"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier organization has been created and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/CarrierOrg"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get":  {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getAllCarrierOrgs",
        "summary":                     "Return the complete list of Carrier Organizations",
        "description":                 "Returns the complete list of all Carriers, which the current user has the right to read",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier organization has been found.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/CarrierOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/carrier/entityID/{entityID}":        {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getCarrierOrgByEntityID",
        "summary":                     "Return the Carrier Organization selected by ID",
        "description":                 "Returns the Carrier Organization selected by ID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "entityID",
            "in":          "path",
            "description": "The ID of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/CarrierOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/carrier/name/{name}":                {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getCarrierOrgByName",
        "summary":                     "Return the Carrier Organization selected by name",
        "description":                 "Returns the Carrier Organization selected by name",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "name",
            "in":          "path",
            "description": "Name of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/CarrierOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/recipient/":                         {
      "post": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "createRecipient",
        "summary":                     "Create a new Recipient Organization",
        "description":                 "Creates a new Recipient organization and saves it to the blockchain, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "RecipientOrg",
            "in":          "body",
            "description": "The Recipient organization object",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/RecipientOrg"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient organization has been created and written to the blockchain\n",
            "schema":      {
              "$ref": "#/definitions/RecipientOrg"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get":  {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getAllRecipientOrgs",
        "summary":                     "Return the complete list of Recipient Organizations",
        "description":                 "Returns the complete list of Recipients, which the current user has the right to read",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient organization has been found.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/RecipientOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/recipient/entityID/{entityID}":      {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getRecipientOrgByEntityID",
        "summary":                     "Return the Recipient Organization selected by ID",
        "description":                 "Returns the Recipient Organization selected by ID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "entityID",
            "in":          "path",
            "description": "The ID of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/RecipientOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/organization/recipient/name/{name}":              {
      "get": {
        "x-swagger-router-controller": "OrganizationController",
        "operationId":                 "getRecipientOrgByName",
        "summary":                     "Return the Recipient Organization selected by name",
        "description":                 "Returns the Recipient Organization selected by name",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "name",
            "in":          "path",
            "description": "Name of the organization",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient has been found and is returned.\n",
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/RecipientOrg"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vehicle/":                                        {
      "post": {
        "x-swagger-router-controller": "VehicleController",
        "operationId":                 "createVehicles",
        "summary":                     "Create a set of vehicles from a list",
        "description":                 "Creates a set of vehicles from a list, if the user has the right permissions.\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "vehicles",
            "in":          "body",
            "description": "The list of vehicles",
            "required":    true,
            "schema":      {
              "type":  "array",
              "items": {
                "$ref": "#/definitions/Vehicle"
              }
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The vehicles have been created and written into the blockchain\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/Vehicle"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get":  {
        "x-swagger-router-controller": "VehicleController",
        "operationId":                 "getAllVehicles",
        "summary":                     "Return the complete list of vehicles",
        "description":                 "Returns the complete list of vehicles, which the current user has the right to read",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The vehicles list is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/Vehicle"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vehicle/vin/{vin}":                               {
      "get": {
        "x-swagger-router-controller": "VehicleController",
        "operationId":                 "getVehicleByVin",
        "summary":                     "Return the vehicle containing the provided vin",
        "description":                 "Returns the vehicle containing the provided vin",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "vin",
            "in":          "path",
            "description": "Vin of the vehicle",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The vehicles is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/Vehicle"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/vehicle/plateNumber/{plateNumber}":               {
      "get": {
        "x-swagger-router-controller": "VehicleController",
        "operationId":                 "getVehicleByPlateNumber",
        "summary":                     "Return the vehicle containing the provided plateNumber",
        "description":                 "Returns the vehicle containing the provided plateNumber",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "plateNumber",
            "in":          "path",
            "description": "PlateNumber of the vehicle",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The vehicle is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/Vehicle"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/":                                    {
      "post": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "addParticipant",
        "summary":                     "Create a new participant and issue an identity on the blockchain",
        "description":                 "Creates a new participant, issues an identity on the blockchain and a new user for the app server\n",
        "consumes":                    [
          "application/json"
        ],
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "participant",
            "in":          "body",
            "description": "List of participants",
            "required":    true,
            "schema":      {
              "$ref": "#/definitions/Participant"
            }
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The participant(s) have been created and written to the blockchain\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/Vehicle"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/legalowner/admin/":                   {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getAllLegalOwnerAdmins",
        "summary":                     "Return the list of the Legal Owner Admins",
        "description":                 "Returns the list of the Legal Owner Admins",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of Legal Owner Admins is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/LegalOwnerAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/legalowner/admin/userID/{userID}":    {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getLegalOwnerAdminByUserID",
        "summary":                     "Return the Legal Owner Admin with the specified userID",
        "description":                 "Returns the Legal Owner Admin with the specified userID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "userID",
            "in":          "path",
            "description": "The user ID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Legal Owner Admin is returned\n",
            "$ref":        "#/definitions/LegalOwnerAdmin"
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/legalowner/admin/organization/{org}": {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getLegalOwnerAdminByOrg",
        "summary":                     "Return the list of Legal Owner Admins who are part of the specified organization",
        "description":                 "Returns the list of Legal Owner Admins who are part of the specified organization",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication tokenn",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "org",
            "in":          "path",
            "description": "The organization ID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Legal Owner Admins are returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/LegalOwnerAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/compound/admin/":                     {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getAllCompoundAdmins",
        "summary":                     "Return the list of CompoundAdmins",
        "description":                 "Returns the list of CompoundAdmins",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of CompoundAdmins is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CompoundAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/compound/admin/userID/{userID}":      {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getCompoundAdminByUserID",
        "summary":                     "Return the Compound Admin with the specified userID",
        "description":                 "Returns the Compound Admin with the specified userID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "userID",
            "in":          "path",
            "description": "The userID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Legal Owner Admin is returned\n",
            "$ref":        "#/definitions/CompoundAdmin"
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/compound/admin/organization/{org}":   {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getCompoundAdminByOrg",
        "summary":                     "Return the list of Compound Admins who are part of the specified organization",
        "description":                 "Returns the list of Compound Admins who are part of the specified organization",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "org",
            "in":          "path",
            "description": "The organization id",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Compound Admins are returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CompoundAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/carrier/member/":                     {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getAllCarrierMembers",
        "summary":                     "Return the list of Carrier Members",
        "description":                 "Returns the list of Carrier Members",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of Carrier Members is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CarrierMember"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/carrier/member/userID/{userID}":      {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getCarrierMemberByUserID",
        "summary":                     "Return the Carrier Member with the specified userID",
        "description":                 "Returns the Carrier Member with the specified userID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "userID",
            "in":          "path",
            "description": "The userID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier Member is returned\n",
            "$ref":        "#/definitions/CarrierMember"
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/carrier/member/organization/{org}":   {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getCarrierMemberByOrg",
        "summary":                     "Return the list of Carrier Members who are part of the specified organization",
        "description":                 "Returns the list of Carrier Members who are part of the specified organization",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "org",
            "in":          "path",
            "description": "The organization ID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier Members are returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CarrierMember"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/carrier/admin/":                      {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getAllCarrierAdmins",
        "summary":                     "Return the list of Carrier Admins",
        "description":                 "Returns the list of Carrier Admins",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of Carrier Admins is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CarrierAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/carrier/admin/userID/{userID}":       {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getCarrierAdminByUserID",
        "summary":                     "Return the Carrier Admin with the specified userID",
        "description":                 "Returns the Carrier Admin with the specified userID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "userID",
            "in":          "path",
            "description": "The userID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier Admin is returned\n",
            "$ref":        "#/definitions/CarrierAdmin"
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/carrier/admin/organization/{org}":    {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getCarrierAdminByOrg",
        "summary":                     "Return the list of Carrier Admins who are part of the specified organization",
        "description":                 "Returns the list of Carrier Admins who are part of the specified organization",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "org",
            "in":          "path",
            "description": "The organization ID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Carrier Admins are returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CarrierAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/recipient/admin/":                    {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getAllRecipientAdmins",
        "summary":                     "Return the list of Recipient Admins",
        "description":                 "Returns the list of Recipient Admins",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of Recipient Admins is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/RecipientAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/recipient/admin/userID/{userID}":     {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getRecipientAdminByUserID",
        "summary":                     "Return the Recipient Admin with the specified userID",
        "description":                 "Returns the Recipient Admin with the specified userID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "userID",
            "in":          "path",
            "description": "The userID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient Admin is returned\n",
            "$ref":        "#/definitions/RecipientAdmin"
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/recipient/admin/organization/{org}":  {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getRecipientAdminByOrg",
        "summary":                     "Return the list of Recipient Admins who are part of the specified organization",
        "description":                 "Returns the list of Recipient Admins who are part of the specified organization",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "org",
            "in":          "path",
            "description": "The organization ID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient Admins are returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CarrierAdmin"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/recipient/member/":                   {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getAllRecipientMember",
        "summary":                     "Return the list of the Recipient Members",
        "description":                 "Returns the list of the Recipient Members",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The list of Recipient Members is returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/RecipientMember"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/recipient/member/userID/{userID}":    {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getRecipientMemberByUserID",
        "summary":                     "Return the Recipient Member with the specified userID",
        "description":                 "Returns the Recipient Member with the specified userID",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "userID",
            "in":          "path",
            "description": "The userID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient Admin is returned\n",
            "$ref":        "#/definitions/RecipientMember"
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/participant/recipient/member/organization/{org}": {
      "get": {
        "x-swagger-router-controller": "ParticipantController",
        "operationId":                 "getRecipientMemberByOrg",
        "summary":                     "Return the list of Recipient Members who are part of the specified organization",
        "description":                 "Returns the list of Recipient Members who are part of the specified organization",
        "parameters":                  [
          {
            "name":        "x-access-token",
            "in":          "header",
            "description": "Provide authentication token",
            "required":    true,
            "type":        "string"
          },
          {
            "name":        "org",
            "in":          "path",
            "description": "The organization ID",
            "required":    true,
            "type":        "string"
          }
        ],
        "responses":                   {
          "200":     {
            "description": "The Recipient Members are returned\n",
            "type":        "array",
            "items":       {
              "$ref": "#/definitions/CarrierMember"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema":      {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions":         {
    "Address":                        {
      "type":       "object",
      "properties": {
        "name":        {
          "type":        "string",
          "description": "Provide a name",
          "required":    true
        },
        "street":      {
          "type":        "string",
          "description": "Provide a street name",
          "required":    true
        },
        "houseNumber": {
          "type":        "string",
          "description": "Provide a house number",
          "required":    true
        },
        "city":        {
          "type":        "string",
          "description": "Provide the name of the city",
          "required":    true
        },
        "zipCode":     {
          "type":        "string",
          "description": "Provide a zip code",
          "required":    true
        },
        "country":     {
          "type":        "string",
          "description": "Provide the name of the country",
          "required":    true
        },
        "latitude":    {
          "type":        "number",
          "description": "Provide the correct latitude in integers",
          "required":    true
        },
        "longitude":   {
          "type":        "number",
          "description": "Provide the correct longitude in integers",
          "required":    true
        }
      }
    },
    "Delivery":                       {
      "type":       "object",
      "properties": {
        "address":    {
          "$ref":        "#/definitions/Address",
          "description": "Returns the address object",
          "required":    true
        },
        "actualDate": {
          "type":        "number",
          "description": "Provide an actual date in integers",
          "required":    false
        }
      }
    },
    "Loading":                        {
      "type":       "object",
      "properties": {
        "address":    {
          "$ref":        "#/definitions/Address",
          "description": "Returns the address object",
          "required":    true
        },
        "actualDate": {
          "type":        "number",
          "description": "Provide an actual date in integers",
          "required":    true
        }
      }
    },
    "Creation":                       {
      "type":       "object",
      "properties": {
        "address": {
          "$ref":        "#/definitions/Address",
          "description": "Returns the address object",
          "required":    true
        },
        "date":    {
          "type":        "number",
          "description": "Provide a date in integers",
          "required":    true
        }
      }
    },
    "Remark":                         {
      "type":       "object",
      "properties": {
        "comments":  {
          "type":        "string",
          "description": "Provide comments",
          "required":    true
        },
        "isDamaged": {
          "type":        "boolean",
          "description": "Specify if a good is damaged with true or false",
          "example":     false,
          "required":    false
        }
      }
    },
    "Vehicle":                        {
      "type":       "object",
      "properties": {
        "vin":             {
          "type":        "string",
          "description": "Provide a vin number",
          "required":    true
        },
        "manufacturer":    {
          "type":        "string",
          "description": "Provide a manufacturer",
          "required":    true
        },
        "model":           {
          "type":        "string",
          "description": "Provide a good model",
          "required":    true
        },
        "type":            {
          "type":        "string",
          "description": "Provide a good type",
          "required":    true
        },
        "ecmrs":           {
          "type":        "array",
          "description": "Provide an array of ecmrs, which will be automatically updated",
          "example":     [],
          "required":    true
        },
        "odoMeterReading": {
          "type":        "number",
          "description": "Provide ode meter in integer format",
          "required":    true
        },
        "plateNumber":     {
          "type":        "string",
          "description": "Provide a plateNumber",
          "required":    true
        }
      }
    },
    "EcmrStatus":                     {
      "type":        "string",
      "description": "Select the correct ecmr status",
      "enum":        [
        "CREATED",
        "LOADED",
        "IN_TRANSIT",
        "DELIVERED",
        "CONFIRMED_DELIVERED"
      ]
    },
    "CreateECMRs":                    {
      "type":        "object",
      "description": "This API creates a new ECMR, or multiple ECMRs. Make sure there is an active transport order, otherwise an ECMR can not be created",
      "properties":  {
        "orderID": {
          "type":        "string",
          "description": "Provide the correct orderID",
          "example":     "ORDER1",
          "required":    true
        },
        "ecmrs":   {
          "description": "Returns an array of ecmrs",
          "type":        "array",
          "items":       {
            "$ref": "#/definitions/ECMR"
          }
        }
      }
    },
    "ECMR":                           {
      "description": "Array of ecmrs",
      "properties":  {
        "ecmrID":                 {
          "type":        "string",
          "description": "Provide a unique ecmrID",
          "example":     "ECMRID",
          "required":    true
        },
        "status":                 {
          "$ref":        "#/definitions/EcmrStatus",
          "description": "Select the correct ecmr status",
          "required":    true
        },
        "agreementTerms":         {
          "type":        "string",
          "description": "Provide agreement terms",
          "required":    "true"
        },
        "agreementTermsSec":      {
          "type":        "string",
          "description": "Provide sec agreement terms",
          "required":    "true"
        },
        "legalOwnerRef":          {
          "type":        "string",
          "description": "Provide the Legal Owner reference",
          "required":    "true"
        },
        "carrierRef":             {
          "type":        "string",
          "description": "Provide the Carrier reference",
          "required":    "true"
        },
        "recipientRef":           {
          "type":        "string",
          "description": "Provide the Recipient reference",
          "required":    "true"
        },
        "orderID":                {
          "type":        "string",
          "description": "Provide the corresponding orderID",
          "example":     "ORDER1",
          "required":    "true"
        },
        "issuedBy":               {
          "type":        "string",
          "description": "Provide the issuedBy identity",
          "example":     "koopman",
          "required":    "true"
        },
        "creation":               {
          "$ref":        "#/definitions/Creation",
          "description": "Returns a creation object",
          "required":    true
        },
        "loading":                {
          "$ref":        "#/definitions/Loading",
          "description": "Returns a loading object",
          "required":    true
        },
        "delivery":               {
          "$ref":        "#/definitions/Delivery",
          "description": "Returns a delivery object",
          "required":    true
        },
        "owner":                  {
          "type":        "string",
          "description": "Provide ID of the Legal Owner organization",
          "example":     "leaseplan",
          "required":    true
        },
        "source":          {
          "type":        "string",
          "description": "Provide ID of the Compound organization",
          "example":     "amsterdamcompound",
          "required":    true
        },
        "transporter":     {
          "type":        "string",
          "description": "Provide ID of the Transporter user",
          "example":     "harry@koopman.org",
          "required":    false
        },
        "carrier":         {
          "type":        "string",
          "description": "Provide ID of the Carrier organization",
          "example":     "koopman",
          "required":    true
        },
        "recipient":       {
          "type":        "string",
          "description": "Provide ID of the Recipient organization",
          "example":     "cardealer",
          "required":    true
        },
        "recipientMember": {
          "type":        "string",
          "description": "Provide ID of the Recipient user",
          "example":     "rob@cardealåer.org",
          "required":    false
        },
        "issueDate":       {
          "type":        "number",
          "description": "Provide an issue date in integer format",
          "required":    true
        },
        "carrierComments": {
          "type":        "string",
          "description": "Provide Carrier Comments",
          "required":    true
        },
        "goods":                  {
          "type":     "array",
          "items":    {
            "$ref":        "#/definitions/Good",
            "description": "Returns an array of goods"
          },
          "required": true
        },
        "legalOwnerInstructions": {
          "type":        "string",
          "description": "Provide Legal Owner instructions",
          "required":    true
        },
        "paymentInstructions":    {
          "type":        "string",
          "description": "Provide Payment instructions",
          "required":    true
        },
        "payOnDelivery":          {
          "type":     "string",
          "required": true
        }
      }
    },
    "organizationProperties":         {
      "type":       "object",
      "properties": {
        "entityID": {
          "type":        "string",
          "description": "Provide an entity ID",
          "required":    true
        },
        "name":     {
          "type":        "string",
          "description": "Provide a name",
          "required":    true
        },
        "address":  {
          "$ref":        "#/definitions/Address",
          "description": "Returns an address object",
          "required":    true
        }
      }
    },
    "LegalOwnerOrg":                  {
      "type": "object",
      "$ref": "#/definitions/organizationProperties"
    },
    "CompoundOrg":                    {
      "type": "object",
      "$ref": "#/definitions/organizationProperties"
    },
    "CarrierOrg":                     {
      "type": "object",
      "$ref": "#/definitions/organizationProperties"
    },
    "RecipientOrg":                   {
      "type": "object",
      "$ref": "#/definitions/organizationProperties"
    },
    "Good":                           {
      "type":       "object",
      "properties": {
        "source":          {
          "type":        "string",
          "example":     "amsterdamcompound",
          "description": "The ID of the Compound organization. Make sure to change this if logged in with a different source.",
          "required":    true
        },
        "recipient":       {
          "type":        "string",
          "description": "Provide ID of the Recipient organization",
          "example":     "cardealer",
          "required":    true
        },
        "vehicle":         {
          "$ref":     "#/definitions/Vehicle",
          "required": true
        },
        "loadingAddress":  {
          "$ref":     "#/definitions/Address",
          "required": false
        },
        "deliveryAddress": {
          "$ref":     "#/definitions/Address",
          "required": false
        },
        "pickupWindow":    {
          "$ref":     "#/definitions/DateWindow",
          "required": false
        },
        "deliveryWindow":  {
          "$ref":     "#/definitions/DateWindow",
          "required": false
        },
        "description":     {
          "type":     "string",
          "required": false
        },
        "weight":          {
          "type":     "number",
          "required": false
        }
      }
    },
    "userProperties":                 {
      "type":       "object",
      "properties": {
        "$class":    {
          "type":     "string",
          "required": true
        },
        "userID":    {
          "type":        "string",
          "description": "Provide the unique userID",
          "required":    true
        },
        "userName":  {
          "type":        "string",
          "description": "Provide a username",
          "required":    true
        },
        "firstName": {
          "type":        "string",
          "description": "Provide a first name",
          "required":    true
        },
        "lastName":  {
          "type":        "string",
          "description": "Provide a last name",
          "required":    true
        },
        "address":   {
          "$ref":        "#/definitions/Address",
          "description": "returns the address object",
          "required":    true
        },
        "org":       {
          "type":        "string",
          "description": "ID of the organization",
          "required":    true
        }
      }
    },
    "Participant":                    {
      "type": "object",
      "$ref": "#/definitions/userProperties"
    },
    "LegalOwnerAdmin":                {
      "type": "object",
      "$ref": "#/definitions/userProperties"
    },
    "CompoundAdmin":                  {
      "type": "object",
      "$ref": "#/definitions/userProperties"
    },
    "CarrierAdmin":                   {
      "type": "object",
      "$ref": "#/definitions/userProperties"
    },
    "CarrierMember":                  {
      "type": "object",
      "$ref": "#/definitions/userProperties"
    },
    "RecipientAdmin":                 {
      "type": "object",
      "$ref": "#/definitions/userProperties"
    },
    "RecipientMember":                {
      "type": "object",
      "$ref": "#/definitions/userProperties"
    },
    "Signature":                      {
      "type":       "object",
      "properties": {
        "certificate":   {
          "type":        "string",
          "description": "The signature of the participant",
          "required":    true
        },
        "latitude":      {
          "type":        "number",
          "description": "Latitude in integers",
          "required":    false
        },
        "longitude":     {
          "type":        "string",
          "description": "Longitude in integers",
          "required":    true
        },
        "ip":            {
          "type":        "string",
          "description": "Unique IP address as a string",
          "required":    false
        },
        "timestamp":     {
          "type":        "number",
          "description": "Timestamp as an integer in milliseconds",
          "required":    true
        },
        "generalRemark": {
          "$ref":        "#/definitions/Remark",
          "description": "General remarks for the signature",
          "required":    true
        }
      }
    },
    "TransportOrder":                 {
      "type":        "object",
      "description": "description of the transportOrder",
      "properties":  {
        "orderID":   {
          "type":        "string",
          "example":     "ORDER1",
          "description": "Specify the unique orderID of the transportOrder",
          "required":    true
        },
        "status":    {
          "$ref":        "#/definitions/OrderStatus",
          "description": "Selects the open status for new transportOrders",
          "required":    true
        },
        "owner":     {
          "type":        "string",
          "example":     "leaseplan",
          "description": "The ID of the Legal Owner organization. Make sure to change this if logged in with a different owner.",
          "required":    true
        },
        "carrier":   {
          "type":        "string",
          "example":     "koopman",
          "description": "The ID of the Carrier organization. Make sure to change this if logged in with a different Carrier.",
          "required":    true
        },
        "orderRef":  {
          "type":        "string",
          "description": "External reference for legalOwner legacy system",
          "required":    true
        },
        "goods":     {
          "type":     "array",
          "items":    {
            "$ref":        "#/definitions/Good",
            "description": "Returns an array of goods"
          },
          "required": true
        },
        "issueDate": {
          "type":        "number",
          "description": "The date a transportOrder get issued",
          "required":    true
        },
        "ecmrs":     {
          "type":    "array",
          "example": []
        }
      }
    },
    "OrderStatus":                    {
      "type":        "string",
      "description": "Order status as an enum",
      "enum":        [
        "OPEN",
        "IN_PROGRESS",
        "COMPLETED",
        "CANCELLED"
      ]
    },
    "UpdateStatus":                   {
      "type":       "object",
      "properties": {
        "ecmrID":    {
          "type":        "string",
          "description": "Unique ecmrID number as a string",
          "example":     "A1234567890",
          "required":    false
        },
        "signature": {
          "type":        "object",
          "$ref":        "#/definitions/Signature",
          "description": "Returns a signature object"
        },
        "goods":     {
          "type":  "array",
          "items": {
            "$ref":        "#/definitions/Good",
            "description": "Returns an array of goods"
          }
        }
      }
    },
    "UpdateStatusWithTransportOrder": {
      "type":       "object",
      "properties": {
        "orderID":   {
          "type":        "string",
          "description": "Unique orderID as a string",
          "example":     "ORDER1",
          "required":    false
        },
        "ecmrID":    {
          "type":        "string",
          "description": "Unique ecmrID as a string",
          "example":     "A1234567890",
          "required":    false
        },
        "signature": {
          "type":        "object",
          "$ref":        "#/definitions/Signature",
          "description": "Returns a signature object"
        },
        "goods":     {
          "type":        "array",
          "description": "Returns an array of goods",
          "items":       {
            "$ref": "#/definitions/Good"
          }
        }
      }
    },
    "DateWindow":                     {
      "type":       "object",
      "properties": {
        "startDate": {
          "type":        "number",
          "description": "Start date of the window in UNIX timestamp",
          "example":     "1512082800000",
          "required":    true
        },
        "endDate":   {
          "type":        "number",
          "description": "End date of the window in UNIX timestamp",
          "example":     "1514674800000",
          "required":    true
        }
      }
    },
    "UpdateWindow":                   {
      "type":       "object",
      "properties": {
        "vin":        {
          "type":        "string",
          "description": "Unique VIN number as a string",
          "example":     "183726339N",
          "required":    false
        },
        "orderID":    {
          "type":        "string",
          "description": "Unique orderID as a string",
          "example":     "ORDER1",
          "required":    false
        },
        "dateWindow": {
          "$ref":     "#/definitions/DateWindow",
          "required": true
        }
      }
    },
    "UpdateExpectedWindow":           {
      "type":       "object",
      "properties": {
        "ecmrID":         {
          "type":        "string",
          "description": "Provide an existing ecmrID",
          "example":     "enter correct ecmrID",
          "required":    false
        },
        "expectedWindow": {
          "$ref":     "#/definitions/DateWindow",
          "required": true
        }
      }
    },
    "CancelECMR":                     {
      "type":       "object",
      "properties": {
        "ecmrID":       {
          "type":        "string",
          "description": "Provide an existing ecmrID for an ECMR that needs to be cancelled",
          "required":    true
        },
        "cancellation": {
          "$ref":        "#/definitions/Cancellation",
          "description": "Returns the cancellation object",
          "required":    true
        }
      }
    },
    "CancelTransportOrder":           {
      "type":       "object",
      "properties": {
        "orderID":      {
          "type":        "string",
          "description": "Provide an existing orderID for a transportOrder that needs to be cancelled",
          "required":    true
        },
        "cancellation": {
          "$ref":        "#/definitions/Cancellation",
          "description": "Returns the cancellation object",
          "required":    true
        }
      }
    },
    "Cancellation":                   {
      "type":       "object",
      "properties": {
        "cancelledBy": {
          "type":        "string",
          "description": "Optional: provide identity of participant that is about to cancel",
          "required":    true
        },
        "reason":      {
          "type":        "string",
          "description": "Provide a reason for cancellation",
          "required":    true
        }
      }
    },
    "LoginCredentials":               {
      "type":       "object",
      "properties": {
        "username": {
          "type":        "string",
          "description": "Provide a username",
          "required":    true
        },
        "password": {
          "type":        "string",
          "description": "Provide a password",
          "required":    true
        }
      }
    },
    "LoginResponse":                  {
      "type":       "object",
      "properties": {
        "success": {
          "type":        "boolean",
          "description": "Returns if a login was successful or not",
          "required":    true
        },
        "token":   {
          "type":        "string",
          "description": "Returns a unique token that is bound to the user logging in",
          "required":    true
        },
        "user":    {
          "type":       "object",
          "properties": {
            "userID":    {
              "type":        "string",
              "description": "Displays the userID",
              "required":    true
            },
            "username":  {
              "type":        "string",
              "description": "Displays the username",
              "required":    true
            },
            "userEmail": {
              "type":        "string",
              "description": "Displays the user email",
              "required":    true
            },
            "role":      {
              "type":        "string",
              "description": "Displays the user role",
              "required":    true
            }
          }
        }
      }
    },
    "Error":                          {
      "type":       "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "message":     {
          "type": "string"
        }
      }
    }
  }
}